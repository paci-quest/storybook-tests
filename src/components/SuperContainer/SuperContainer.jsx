/**********************************************************************
*
*   Component generated by Quest
*
*   WARNING: By editing this component by hand, you will lose the ability to regenerate the code without conflicts. 
*   To preseve that abilty, always export from Quest to regenerate this file.
*   To setup props, bindings and actions, use the Quest editor
*   Code Logic goes in the hook associated with this component
*
*   For help and further details refer to: https://www.quest.ai/docs
*
*
**********************************************************************/

import React from 'react';
import { Switch, FormControlLabel, Radio, Checkbox, Avatar, Badge, Button, Autocomplete, TextField, SvgIcon, Alert, Link } from '@mui/material';
import Avatar1Image from 'src/assets/images/SuperContainer_Avatar_1.png';
import { ReactComponent as StarFilled1 } from 'src/assets/images/_StarFilled.svg';
import { styled } from '@mui/material/styles';
import useSuperContainer from 'src/components/SuperContainer/useSuperContainer';
 
const SuperContainer1 = styled("div")({  
  backgroundColor: `rgba(255, 255, 255, 1)`,  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `center`,  
  padding: `1px 24px`,  
  boxSizing: `border-box`,  
  height: "100%",  
  width: "100%",  
});
  
const Frame12 = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  width: `197px`,  
  height: `243px`,  
  margin: `0px`,  
  overflow: `hidden`,  
});
  
const Title = styled("header")(({ theme }) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: `rgba(0, 0, 0, 1)`,  
  fontStyle: theme.typography["Components"]["Button Large"].fontStyle,  
  fontFamily: theme.typography["Components"]["Button Large"].fontFamily,  
  fontWeight: theme.typography["Components"]["Button Large"].fontWeight,  
  fontSize: theme.typography["Components"]["Button Large"].fontSize,  
  letterSpacing: theme.typography["Components"]["Button Large"].letterSpacing,  
  textDecoration: theme.typography["Components"]["Button Large"].textDecoration,  
  lineHeight: theme.typography["Components"]["Button Large"].lineHeight,  
  textTransform: theme.typography["Components"]["Button Large"].textTransform,  
  width: `154px`,  
  height: `24px`,  
  position: `absolute`,  
  left: `17px`,  
  top: `26px`,  
}));
  
const Description = styled("details")({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: `rgba(0, 0, 0, 1)`,  
  fontStyle: `normal`,  
  fontFamily: `Roboto`,  
  fontWeight: `500`,  
  fontSize: `15px`,  
  letterSpacing: `0.46000000834465027px`,  
  textDecoration: `none`,  
  lineHeight: `26px`,  
  textTransform: `none`,  
  width: `158px`,  
  height: `164px`,  
  position: `absolute`,  
  left: `13px`,  
  top: `62px`,  
});
  
const FormControlLabel1 = styled(FormControlLabel)({  
  margin: `0px 0px 0px 13px`,  
});
  
const Frame9 = styled("summary")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `17px 30px`,  
  boxSizing: `border-box`,  
  margin: `0px 0px 0px 13px`,  
});
  
const FormControlLabel2 = styled(FormControlLabel)({  
  margin: `0px`,  
});
  
const FormControlLabel3 = styled(FormControlLabel)({  
  margin: `29px 0px 0px 0px`,  
});
  
const Frame10 = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `10px`,  
  boxSizing: `border-box`,  
  margin: `0px 0px 0px 13px`,  
});
  
const FormControlLabel4 = styled(FormControlLabel)({  
  margin: `0px`,  
});
  
const FormControlLabel5 = styled(FormControlLabel)({  
  margin: `10px 0px 0px 0px`,  
});
  
const FormControlLabel6 = styled(FormControlLabel)({  
  margin: `10px 0px 0px 0px`,  
});
  
const Frame11 = styled("main")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `center`,  
  padding: `26px 35px`,  
  boxSizing: `border-box`,  
  margin: `0px 0px 0px 13px`,  
});
  
const Avatar1 = styled(Avatar)({  
  margin: `0px`,  
  width: `40px`,  
  height: `40px`,  
});
  
const ButtonContainedWrapper = styled("div")({  
  margin: `15px 0px 0px 0px`,  
});
  
const Autocomplete1 = styled(Autocomplete)({  
  width: `220px`,  
  margin: `15px 0px 0px 0px`,  
});
  
const Icon1 = styled(SvgIcon)(({ theme }) =>({  
  color: theme.palette["Action"]["Active (54p)"],  
  margin: `15px 0px 0px 0px`,  
}));
  
const AlertFilled = styled(Alert)({  
  width: `320px`,  
  margin: `15px 0px 0px 0px`,  
});
  
const Link1 = styled(Link)(({ theme }) =>({  
  color: theme.palette["Text"]["Primary"],  
  fontStyle: theme.typography["Typography"]["Body 1"].fontStyle,  
  fontFamily: theme.typography["Typography"]["Body 1"].fontFamily,  
  fontWeight: theme.typography["Typography"]["Body 1"].fontWeight,  
  fontSize: theme.typography["Typography"]["Body 1"].fontSize,  
  letterSpacing: theme.typography["Typography"]["Body 1"].letterSpacing,  
  lineHeight: theme.typography["Typography"]["Body 1"].lineHeight,  
  textTransform: theme.typography["Typography"]["Body 1"].textTransform,  
  margin: `15px 0px 0px 0px`,  
}));
  
const Link2 = styled(Link)(({ theme }) =>({  
  color: theme.palette["Primary"]["Main"],  
  fontStyle: theme.typography["Typography"]["Body 1"].fontStyle,  
  fontFamily: theme.typography["Typography"]["Body 1"].fontFamily,  
  fontWeight: theme.typography["Typography"]["Body 1"].fontWeight,  
  fontSize: theme.typography["Typography"]["Body 1"].fontSize,  
  letterSpacing: theme.typography["Typography"]["Body 1"].letterSpacing,  
  lineHeight: theme.typography["Typography"]["Body 1"].lineHeight,  
  textTransform: theme.typography["Typography"]["Body 1"].textTransform,  
  margin: `0px 0px 0px 13px`,  
}));
 
function SuperContainer(props) {
  
  const {fns} = useSuperContainer();
  return (
    <SuperContainer1  className={props.className}   >
      <Frame12 >
        <Title >
          {`TITLE HERE`}
            </Title>
        <Description id={"description_ID"}  >
          {`Description here lorem ipsum lorem ipsum lorem ipsum Description here lorem ipsum lorem ipsum lorem ipsum `}
            </Description>
      </Frame12>
      <FormControlLabel1 control={<Switch defaultChecked={false} color="info" size="medium" inputProps={{"aria-label": "switch_aria_label"}} />} label={"Label"} />
      <Frame9  aria-describedby={"radioGroup_aria_describedBy"} >
        <FormControlLabel2  control={<Radio color="primary" size="small" inputProps={{"aria-label": "radio_1"}} />} label={"Label"} />
        <FormControlLabel3  control={<Radio color="primary" size="small" inputProps={{"aria-label": "radio_2"}} />} label={"Label"} />
      </Frame9>
      <Frame10 id={"check_wrapper"}   aria-labelledby={"checkboxGroup_aria_labelledby"} >
        <FormControlLabel4 control={<Checkbox defaultChecked={false} size="medium" color="secondary" inputProps={{"aria-label": "checkbox_aria_1"}} />} label={`Label`} />
        <FormControlLabel5 control={<Checkbox defaultChecked={false} size="medium" color="secondary" inputProps={{"aria-label": "checkbox_aria_2"}} />} label={`Label`} />
        <FormControlLabel6 control={<Checkbox defaultChecked={false} size="medium" color="secondary" inputProps={{"aria-label": "checkbox_aria_3"}} />} label={`Label`} />
      </Frame10>
      <Frame11 >
        <Avatar1 variant="circular" src={Avatar1Image} alt={"Avatar"}   />
        <ButtonContainedWrapper id={"badge_id"} aria-label={"badge_arialabel"}>
          <Badge  anchorOrigin={{vertical: 'top', horizontal: 'right'}} color={"primary"} badgeContent={123}>
          <Button variant="contained" size="large" color="secondary"  onClick={fns.onClick}  aria-label={`"button-large"`}> Large </Button>
        </Badge>
        </ButtonContainedWrapper>
        <Autocomplete1 id={"autocompleteID_1"}         autoHighlight disableClearable openOnFocus blurOnSelect   renderInput={(params) => ( <TextField variant="outlined" {...params} fullWidth  label={`Label`}  /> )} />
        <Icon1    fontSize = { "large"}  component = { StarFilled1} inputProps={{"aria-label": "icon"}}/>
        <AlertFilled variant="filled" severity={"success"}   > Description </AlertFilled>
        <Link1 href="#" underline="always"  >Link</Link1>
      </Frame11>
      <Link2 href="#" underline="none"  >Link</Link2>
    </SuperContainer1>
  );
}

export default SuperContainer;
